#! /bin/bash

RED='\033[0;31m'
NC='\033[0m' # No Color

RESET=0
while getopts "sfra" option; do
   case $option in
      s) SYNC=1 ;;
      f) FETCH=1 ;;
      r) RESET=1 ;;
      a) ALL_BRANCHES=1 ;;
   esac
done

# branches to sync
usual_branches=( \
   master \
   area/pasg \
   feature/encrypted_file_replication \
   rel4-5-a \
)
all_branches=${usual_branches[@]}
all_branches+=( \
   rel4-1-x \
   rel4-3-x \
   rel4-4-0 \
   rel4-4-x \
)

if [ "$ALL_BRANCHES" == "1" ]; then
   branches=${all_branches[@]}
else
   branches=${usual_branches[@]}
fi

if [ "$SYNC" == "1" ]; then
   for branch in ${branches[@]}
   do
      echo "--> syncing branch: [$branch]"
      gh repo sync pure-forks/jlaz-iridium -b $branch
   done
   echo ""
fi

if [ "$FETCH" == "1" ]; then
   echo "--> fetching repos"
   git fetch --prune origin
   git fetch --prune upstream ${branches[@]}
   echo ""
fi

if [ "$RESET" == "1" ]
then
   echo "--> resetting branches"
   for branch in ${branches[@]}
   do
      git rev-parse --verify $branch > /dev/null 2>&1
      if [ "$?" != "0" ]
      then
         echo -e "no such branch: [$branch], skipping..."
         continue
      fi
      if [ "$(git show --pretty=format:%h $branch)" == "$(git show --pretty=format:%h origin/$branch)" ]
      then
         echo "[$branch] already up-to-date with origin, continuing..."
         continue
      else
         if [ "$(git branch --show-current)" == "$branch" ]
         then
            echo -e "${RED}not resetting branch: [$branch], because we're on this branch\n" \
               "please merge origin or upstream manually${NC}"
         else
            echo "resetting branch: [$branch]"
            git branch --force $branch origin/$branch
            if [ "$?" != "0" ]
            then
               echo -e "${RED}resetting branch failed${NC}"
            fi
         fi
      fi
   done
   echo ""
fi